@page "/checkout"
@rendermode InteractiveServer
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<PizzaMenu />

<div class="main">
    <EditForm Model="Address" OnValidSubmit="PlaceOrder">
			<div class="checkout-cols">
					<div class="checkout-order-details">
							<h4>Review Order</h4>
							<OrderReview Order="Order" />
					</div>

					<div class="checkout-delivery-address">
						<h4>Deliver to...</h4>
						@if (isError) {
							<div class="alert alert-danger">Please enter a name and address.</div>
						}
						<AddressEditor Address="Address" />
					</div>
			</div>

			<button
					type="submit"
					disabled=@isSubmitting
					class="checkout-button btn btn-warning"
			>
					Place Order
			</button>
			<DataAnnotationsValidator />
		</EditForm>
</div>

@code {
    Order Order => OrderState.Order;
		private Address _address;
		Address Address => _address ?? (_address = OrderState.Order.DeliveryAddress ?? new Address());
    bool isSubmitting;
		bool isError = false;

    async Task PlaceOrder()
    {
        var resp = await HttpClient.PostAsJsonAsync(NavigationManager.BaseUri + "orders", OrderState.Order);
        var newOrderId = await resp.Content.ReadFromJsonAsync<int>();
        OrderState.ResetOrder();
        NavigationManager.NavigateTo($"/myorders/{newOrderId}");
    }

		// used with OnSubmit="CheckSubmission"
		private async Task CheckSubmission(EditContext editContext)
		{
			isSubmitting = true;
			var model  = editContext.Model as Address;
			isError = string.IsNullOrWhiteSpace(model?.Name)
				|| string.IsNullOrWhiteSpace(model?.Line1)
				|| string.IsNullOrWhiteSpace(model?.PostalCode);
			Console.WriteLine("DEBUG: ");
			Console.WriteLine(model);
			Console.WriteLine(isError);
			if (!isError)
			{
				await PlaceOrder();
			}
			isSubmitting = false;
		}
}
