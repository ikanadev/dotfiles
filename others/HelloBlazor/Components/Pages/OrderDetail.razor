@page "/myorders/{orderId:int}"
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<div class="top-bar">
    <a class="logo" href="">
        <img src="img/logo.svg" />
    </a>

    <NavLink href="" class="nav-tab" Match="NavLinkMatch.All">
        <img src="img/pizza-slice.svg" />
        <div>Get Pizza</div>
    </NavLink>

    <NavLink href="myorders" class="nav-tab">
        <img src="img/bike.svg" />
        <div>My Orders</div>
    </NavLink>
</div>

<div class="main">
	@if (invalidOrder)
	{
		<h2>Order not found</h2>
		<p>We're sorry, but the order you requested could not be found.</p>
	}
	else if (orderWithStatus == null)
	{
		<div class="track-order">
			<div class="track-order-title">
				<h2><text>Loading...</text></h2>
				<p class="ml-auto mb-0">...</p>
			</div>
		</div>
	}
	else
	{
		<div class="track-order">
			<div class="track-order-title">
				<h2>
					Order placed @orderWithStatus.Order.CreatedTime.ToLongTimeString()
				</h2>
				<p class="ml-auto mb-0">
					Status: <strong>@orderWithStatus.StatusText</strong>
				</p>
			</div>
			<div class="track-order-body">
				<div class="track-order-details">
					@foreach (var pizza in orderWithStatus.Order.Pizzas)
					{
						<p>
							<strong>
								@(pizza.Size)"
								@(pizza.Special?.Name ?? "-")
								($@pizza.GetFormattedTotalPrice())
							</strong>
						</p>
					}
				</div>
			</div>
		</div>
	}
</div>

@code {
	[Parameter]
	public int OrderId { get; set; }

	OrderWithStatus? orderWithStatus;
	bool invalidOrder = false;

	protected override async Task OnParametersSetAsync()
	{
		try
		{
			var resp = await HttpClient.GetFromJsonAsync<OrderWithStatus>(
				$"{NavigationManager.BaseUri}orders/{OrderId}"
			);
			if (resp != null)
			{
				orderWithStatus = resp;
			}
		}
		catch (Exception ex)
		{
			invalidOrder = true;
			Console.Error.WriteLine(ex);
		}
	}
}
